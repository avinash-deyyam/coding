Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:

Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.

class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        length = [1]*len(nums)
        count = [1]*len(nums)

        for i in range(1,len(nums)):
            for j in range(i):
                if nums[i] > nums[j]:
                    if length[i] < length[j] + 1:
                        length[i] = length[j] + 1
                        count[i] = 0
                    
                    if length[i] == length[j] + 1:
                        count[i] += count[j]

        max_length = max(length)
        ct = 0
        for i in range(len(nums)):
            if length[i] == max_length:
                ct += count[i]
        
        return ct

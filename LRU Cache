Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]


class LRUnode:
    def __init__(self,key,value):
        self.key = key
        self.value = value
        self.previous = None
        self.next = None

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.lru = {}
        self.head = LRUnode(-1,-1)
        self.tail = LRUnode(-1,-1)
        self.head.next = self.tail
        self.tail.previous = self.head 

    def get(self, key: int) -> int:
        if key in self.lru:
            node = self.lru[key]
            self.remove(node)
            self.add(node)
            return node.value
        else:
            return -1 
        
    def put(self, key: int, value: int) -> None:
        if key in self.lru:
            node = self.lru[key]
            self.remove(node)
        
        node = LRUnode(key, value)
        self.lru[key] = node
        self.add(node)

        if len(self.lru) > self.capacity:
            node = self.head.next
            self.remove(node)
            del self.lru[node.key]

    def add(self, node):
        node.next = self.tail
        node.previous = self.tail.previous
        self.tail.previous.next = node
        self.tail.previous = node

    def remove(self, node):
        node.previous.next = node.next
        node.next.previous = node.previous

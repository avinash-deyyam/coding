
Design the CombinationIterator class:

CombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
next() Returns the next combination of length combinationLength in lexicographical order.
hasNext() Returns true if and only if there exists a next combination.
 

Example 1:

Input
["CombinationIterator", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[["abc", 2], [], [], [], [], [], []]
Output
[null, "ab", true, "ac", true, "bc", false]

Explanation
CombinationIterator itr = new CombinationIterator("abc", 2);
itr.next();    // return "ab"
itr.hasNext(); // return True
itr.next();    // return "ac"
itr.hasNext(); // return True
itr.next();    // return "bc"
itr.hasNext(); // return False

class CombinationIterator:

    def __init__(self, characters: str, combinationLength: int):
        self.characters = characters
        self.length = len(self.characters)
        self.combinationLength = combinationLength

        def gen(i,data):
            if len(data) == self.combinationLength:
                yield ''.join(data)

            for j in range(i, self.length):
                data.append(self.characters[j])
                yield from gen(j+1, data)
                data.pop()
                print(j,data)

        self.gen = gen(0,[])
        self.current = next(self.gen, None)


    def next(self) -> str:
        temp = self.current
        self.current = next(self.gen, None)
        return temp


    def hasNext(self) -> bool:
        return bool(self.current)
        


# Your CombinationIterator object will be instantiated and called as such:
# obj = CombinationIterator(characters, combinationLength)
# param_1 = obj.next()
# param_2 = obj.hasNext()

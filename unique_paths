There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        # dp = [[0]*n for _ in range(m)]
        # for row in range(m):
        #     for col in range(n):
        #         if row == 0 and col == 0: dp[row][col] = 1
        #         else: dp[row][col] = dp[max(0,row-1)][col]+dp[row][max(0,col-1)]
        # return dp[m-1][n-1]

        dp = [0]*n
        for row in range(m):
            for col in range(n):
                if row==0 and col==0:
                    dp[col] = 1
                elif row == 0:
                    dp[col] = dp[col-1]
                elif row!=0 and col!=0:
                    dp[col] = dp[col-1] + dp[col]
                else:
                    pass
        return dp[-1]

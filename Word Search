Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true


class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        rows = len(board)
        cols = len(board[0])

        def backtrack(row, col, suffix):
            if len(suffix) == 0:
                return True
            
            if row<0 or row==rows or col<0 or col==cols or board[row][col] != suffix[0]:
                return False

            board[row][col] = '*'
            for rowOffset, colOffset in ((0,1),(0,-1),(1,0),(-1,0)):
                if backtrack(row+rowOffset, col+colOffset, suffix[1:]):
                    return True

            board[row][col] = suffix[0]
            return False

        for row in range(rows):
            for col in range(cols):
                if backtrack(row, col, word):
                    return True
        
        return False

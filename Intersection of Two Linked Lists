Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        # node = headA
        # node_presence = set()
        # while node:
        #     node_presence.add(node)
        #     node = node.next

        # node = headB
        # while node:
        #     if node in node_presence:
        #         return node
        #     node = node.next


        p1 = headA
        p2 = headB

        while p1!=p2:
            p1 = headB if not p1  else p1.next
            p2 = headA if not p2 else p2.next
        return p1
